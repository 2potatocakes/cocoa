# generated by 'rake generate'
require 'cocoa/bindings/NSTypesetter'
module Cocoa
  class NSATSTypesetter < Cocoa::NSTypesetter
    attach_method :attributedString, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :bidiProcessingEnabled, :args=>0, :names=>[], :types=>[], :retval=>"B"
    attach_method :boundingBoxForControlGlyphAtIndex, :args=>5, :names=>[:forTextContainer, :proposedLineFragment, :glyphPosition, :characterIndex], :types=>["Q", "@", "{CGRect={CGPoint=dd}{CGSize=dd}}", "{CGPoint=dd}", "Q"], :retval=>"{CGRect={CGPoint=dd}{CGSize=dd}}"
    attach_method :characterRangeForGlyphRange, :args=>2, :names=>[:actualGlyphRange], :types=>["{_NSRange=QQ}", "^{_NSRange=QQ}"], :retval=>"{_NSRange=QQ}"
    attach_method :currentTextContainer, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :deleteGlyphsInRange, :args=>1, :names=>[], :types=>["{_NSRange=QQ}"], :retval=>"v"
    attach_method :getGlyphsInRange, :args=>5, :names=>[:glyphs, :characterIndexes, :glyphInscriptions, :elasticBits], :types=>["{_NSRange=QQ}", "^I", "^Q", "^Q", "^B"], :retval=>"Q"
    attach_method :getLineFragmentRect, :args=>4, :names=>[:usedRect, :forParagraphSeparatorGlyphRange, :atProposedOrigin], :types=>["^{CGRect={CGPoint=dd}{CGSize=dd}}", "^{CGRect={CGPoint=dd}{CGSize=dd}}", "{_NSRange=QQ}", "{CGPoint=dd}"], :retval=>"v"
    attach_method :glyphRangeForCharacterRange, :args=>2, :names=>[:actualCharacterRange], :types=>["{_NSRange=QQ}", "^{_NSRange=QQ}"], :retval=>"{_NSRange=QQ}"
    attach_method :hyphenCharacterForGlyphAtIndex, :args=>1, :names=>[], :types=>["Q"], :retval=>"I"
    attach_method :hyphenationFactor, :args=>0, :names=>[], :types=>[], :retval=>"f"
    attach_method :hyphenationFactorForGlyphAtIndex, :args=>1, :names=>[], :types=>["Q"], :retval=>"f"
    attach_method :insertGlyph, :args=>3, :names=>[:atGlyphIndex, :characterIndex], :types=>["I", "Q", "Q"], :retval=>"v"
    attach_method :layoutManager, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :layoutParagraphAtPoint, :args=>1, :names=>[], :types=>["^{CGPoint=dd}"], :retval=>"Q"
    attach_method :lineFragmentPadding, :args=>0, :names=>[], :types=>[], :retval=>"d"
    attach_method :lineFragmentRectForProposedRect, :args=>2, :names=>[:remainingRect], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}", "^{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"{CGRect={CGPoint=dd}{CGSize=dd}}"
    attach_method :lineSpacingAfterGlyphAtIndex, :args=>2, :names=>[:withProposedLineFragmentRect], :types=>["Q", "{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"d"
    attach_method :paragraphGlyphRange, :args=>0, :names=>[], :types=>[], :retval=>"{_NSRange=QQ}"
    attach_method :paragraphSeparatorGlyphRange, :args=>0, :names=>[], :types=>[], :retval=>"{_NSRange=QQ}"
    attach_method :paragraphSpacingAfterGlyphAtIndex, :args=>2, :names=>[:withProposedLineFragmentRect], :types=>["Q", "{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"d"
    attach_method :paragraphSpacingBeforeGlyphAtIndex, :args=>2, :names=>[:withProposedLineFragmentRect], :types=>["Q", "{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"d"
    attach_method :setAttachmentSize, :args=>2, :names=>[:forGlyphRange], :types=>["{CGSize=dd}", "{_NSRange=QQ}"], :retval=>"v"
    attach_method :setAttributedString, :args=>1, :names=>[], :types=>["@"], :retval=>"v"
    attach_method :setBidiLevels, :args=>2, :names=>[:forGlyphRange], :types=>["*", "{_NSRange=QQ}"], :retval=>"v"
    attach_method :setBidiProcessingEnabled, :args=>1, :names=>[], :types=>["B"], :retval=>"v"
    attach_method :setDrawsOutsideLineFragment, :args=>2, :names=>[:forGlyphRange], :types=>["B", "{_NSRange=QQ}"], :retval=>"v"
    attach_method :setHardInvalidation, :args=>2, :names=>[:forGlyphRange], :types=>["B", "{_NSRange=QQ}"], :retval=>"v"
    attach_method :setHyphenationFactor, :args=>1, :names=>[], :types=>["f"], :retval=>"v"
    attach_method :setLineFragmentPadding, :args=>1, :names=>[], :types=>["d"], :retval=>"v"
    attach_method :setLineFragmentRect, :args=>4, :names=>[:forGlyphRange, :usedRect, :baselineOffset], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}", "{_NSRange=QQ}", "{CGRect={CGPoint=dd}{CGSize=dd}}", "d"], :retval=>"v"
    attach_method :setLocation, :args=>3, :names=>[:withAdvancements, :forStartOfGlyphRange], :types=>["{CGPoint=dd}", "^d", "{_NSRange=QQ}"], :retval=>"v"
    attach_method :setNotShownAttribute, :args=>2, :names=>[:forGlyphRange], :types=>["B", "{_NSRange=QQ}"], :retval=>"v"
    attach_method :setParagraphGlyphRange, :args=>2, :names=>[:separatorGlyphRange], :types=>["{_NSRange=QQ}", "{_NSRange=QQ}"], :retval=>"v"
    attach_method :setTypesetterBehavior, :args=>1, :names=>[], :types=>["q"], :retval=>"v"
    attach_method :setUsesFontLeading, :args=>1, :names=>[], :types=>["B"], :retval=>"v"
    attach_singular_method :sharedTypesetter, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :shouldBreakLineByHyphenatingBeforeCharacterAtIndex, :args=>1, :names=>[], :types=>["Q"], :retval=>"B"
    attach_method :shouldBreakLineByWordBeforeCharacterAtIndex, :args=>1, :names=>[], :types=>["Q"], :retval=>"B"
    attach_method :substituteFontForFont, :args=>1, :names=>[], :types=>["@"], :retval=>"@"
    attach_method :substituteGlyphsInRange, :args=>2, :names=>[:withGlyphs], :types=>["{_NSRange=QQ}", "^I"], :retval=>"v"
    attach_method :textTabForGlyphLocation, :args=>3, :names=>[:writingDirection, :maxLocation], :types=>["d", "q", "d"], :retval=>"@"
    attach_method :typesetterBehavior, :args=>0, :names=>[], :types=>[], :retval=>"q"
    attach_method :usesFontLeading, :args=>0, :names=>[], :types=>[], :retval=>"B"
    attach_method :willSetLineFragmentRect, :args=>4, :names=>[:forGlyphRange, :usedRect, :baselineOffset], :types=>["^{CGRect={CGPoint=dd}{CGSize=dd}}", "{_NSRange=QQ}", "^{CGRect={CGPoint=dd}{CGSize=dd}}", "^d"], :retval=>"v"
  end
end
