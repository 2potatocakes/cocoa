# generated by 'rake generate'
require 'cocoa/bindings/NSObject'
module Cocoa
  class NSHashTable < Cocoa::NSObject
    attach_method :addObject, :args=>1, :names=>[], :types=>["@"], :retval=>"v"
    attach_method :allObjects, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :anyObject, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :containsObject, :args=>1, :names=>[], :types=>["@"], :retval=>"B"
    attach_method :count, :args=>0, :names=>[], :types=>[], :retval=>"Q"
    attach_singular_method :hashTableWithOptions, :args=>1, :names=>[], :types=>["Q"], :retval=>"@"
    attach_singular_method :hashTableWithWeakObjects, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :initWithOptions, :args=>2, :names=>[:capacity], :types=>["Q", "Q"], :retval=>"@"
    attach_method :initWithPointerFunctions, :args=>2, :names=>[:capacity], :types=>["@", "Q"], :retval=>"@"
    attach_method :intersectHashTable, :args=>1, :names=>[], :types=>["@"], :retval=>"v"
    attach_method :intersectsHashTable, :args=>1, :names=>[], :types=>["@"], :retval=>"B"
    attach_method :isEqualToHashTable, :args=>1, :names=>[], :types=>["@"], :retval=>"B"
    attach_method :isSubsetOfHashTable, :args=>1, :names=>[], :types=>["@"], :retval=>"B"
    attach_method :member, :args=>1, :names=>[], :types=>["@"], :retval=>"@"
    attach_method :minusHashTable, :args=>1, :names=>[], :types=>["@"], :retval=>"v"
    attach_method :objectEnumerator, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :pointerFunctions, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :removeAllObjects, :args=>0, :names=>[], :types=>[], :retval=>"v"
    attach_method :removeObject, :args=>1, :names=>[], :types=>["@"], :retval=>"v"
    attach_method :setRepresentation, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :unionHashTable, :args=>1, :names=>[], :types=>["@"], :retval=>"v"
    attach_singular_method :weakObjectsHashTable, :args=>0, :names=>[], :types=>[], :retval=>"@"
  end
end
