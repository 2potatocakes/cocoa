# generated by 'rake generate'
require 'cocoa/bindings/NSObject'
module Cocoa
  class NSBezierPath < Cocoa::NSObject
    attach_method :addClip, :args=>0, :names=>[], :types=>[], :retval=>"v"
    attach_method :appendBezierPath, :args=>1, :names=>[], :types=>["@"], :retval=>"v"
    attach_method :appendBezierPathWithArcFromPoint, :args=>3, :names=>["toPoint", "radius"], :types=>["{CGPoint=dd}", "{CGPoint=dd}", "d"], :retval=>"v"
    attach_method :appendBezierPathWithArcWithCenter, [{:args=>4, :names=>["radius", "startAngle", "endAngle"], :types=>["{CGPoint=dd}", "d", "d", "d"], :retval=>"v"}, {:args=>5, :names=>["radius", "startAngle", "endAngle", "clockwise"], :types=>["{CGPoint=dd}", "d", "d", "d", "B"], :retval=>"v"}]
    attach_method :appendBezierPathWithGlyph, :args=>2, :names=>["inFont"], :types=>["I", "@"], :retval=>"v"
    attach_method :appendBezierPathWithGlyphs, :args=>3, :names=>["count", "inFont"], :types=>["^I", "q", "@"], :retval=>"v"
    attach_method :appendBezierPathWithOvalInRect, :args=>1, :names=>[], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"v"
    attach_method :appendBezierPathWithPackedGlyphs, :args=>1, :names=>[], :types=>["*"], :retval=>"v"
    attach_method :appendBezierPathWithPoints, :args=>2, :names=>["count"], :types=>["^{CGPoint=dd}", "q"], :retval=>"v"
    attach_method :appendBezierPathWithRect, :args=>1, :names=>[], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"v"
    attach_method :appendBezierPathWithRoundedRect, :args=>3, :names=>["xRadius", "yRadius"], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}", "d", "d"], :retval=>"v"
    attach_singular_method :bezierPath, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :bezierPathByFlatteningPath, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_method :bezierPathByReversingPath, :args=>0, :names=>[], :types=>[], :retval=>"@"
    attach_singular_method :bezierPathWithOvalInRect, :args=>1, :names=>[], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"@"
    attach_singular_method :bezierPathWithRect, :args=>1, :names=>[], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"@"
    attach_singular_method :bezierPathWithRoundedRect, :args=>3, :names=>["xRadius", "yRadius"], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}", "d", "d"], :retval=>"@"
    attach_method :bounds, :args=>0, :names=>[], :types=>[], :retval=>"{CGRect={CGPoint=dd}{CGSize=dd}}"
    attach_method :cachesBezierPath, :args=>0, :names=>[], :types=>[], :retval=>"B"
    attach_singular_method :clipRect, :args=>1, :names=>[], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"v"
    attach_method :closePath, :args=>0, :names=>[], :types=>[], :retval=>"v"
    attach_method :containsPoint, :args=>1, :names=>[], :types=>["{CGPoint=dd}"], :retval=>"B"
    attach_method :controlPointBounds, :args=>0, :names=>[], :types=>[], :retval=>"{CGRect={CGPoint=dd}{CGSize=dd}}"
    attach_method :currentPoint, :args=>0, :names=>[], :types=>[], :retval=>"{CGPoint=dd}"
    attach_method :curveToPoint, :args=>3, :names=>["controlPoint1", "controlPoint2"], :types=>["{CGPoint=dd}", "{CGPoint=dd}", "{CGPoint=dd}"], :retval=>"v"
    attach_singular_method :defaultFlatness, :args=>0, :names=>[], :types=>[], :retval=>"d"
    attach_singular_method :defaultLineCapStyle, :args=>0, :names=>[], :types=>[], :retval=>"Q"
    attach_singular_method :defaultLineJoinStyle, :args=>0, :names=>[], :types=>[], :retval=>"Q"
    attach_singular_method :defaultLineWidth, :args=>0, :names=>[], :types=>[], :retval=>"d"
    attach_singular_method :defaultMiterLimit, :args=>0, :names=>[], :types=>[], :retval=>"d"
    attach_singular_method :defaultWindingRule, :args=>0, :names=>[], :types=>[], :retval=>"Q"
    attach_singular_method :drawPackedGlyphs, :args=>2, :names=>["atPoint"], :types=>["*", "{CGPoint=dd}"], :retval=>"v"
    attach_method :elementAtIndex, [{:args=>1, :names=>[], :types=>["q"], :retval=>"Q"}, {:args=>2, :names=>["associatedPoints"], :types=>["q", "^{CGPoint=dd}"], :retval=>"Q"}]
    attach_method :elementCount, :args=>0, :names=>[], :types=>[], :retval=>"q"
    attach_method :fill, :args=>0, :names=>[], :types=>[], :retval=>"v"
    attach_singular_method :fillRect, :args=>1, :names=>[], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"v"
    attach_method :flatness, :args=>0, :names=>[], :types=>[], :retval=>"d"
    attach_method :getLineDash, :args=>3, :names=>["count", "phase"], :types=>["^d", "^q", "^d"], :retval=>"v"
    attach_method :isEmpty, :args=>0, :names=>[], :types=>[], :retval=>"B"
    attach_method :lineCapStyle, :args=>0, :names=>[], :types=>[], :retval=>"Q"
    attach_method :lineJoinStyle, :args=>0, :names=>[], :types=>[], :retval=>"Q"
    attach_method :lineToPoint, :args=>1, :names=>[], :types=>["{CGPoint=dd}"], :retval=>"v"
    attach_method :lineWidth, :args=>0, :names=>[], :types=>[], :retval=>"d"
    attach_method :miterLimit, :args=>0, :names=>[], :types=>[], :retval=>"d"
    attach_method :moveToPoint, :args=>1, :names=>[], :types=>["{CGPoint=dd}"], :retval=>"v"
    attach_method :relativeCurveToPoint, :args=>3, :names=>["controlPoint1", "controlPoint2"], :types=>["{CGPoint=dd}", "{CGPoint=dd}", "{CGPoint=dd}"], :retval=>"v"
    attach_method :relativeLineToPoint, :args=>1, :names=>[], :types=>["{CGPoint=dd}"], :retval=>"v"
    attach_method :relativeMoveToPoint, :args=>1, :names=>[], :types=>["{CGPoint=dd}"], :retval=>"v"
    attach_method :removeAllPoints, :args=>0, :names=>[], :types=>[], :retval=>"v"
    attach_method :setAssociatedPoints, :args=>2, :names=>["atIndex"], :types=>["^{CGPoint=dd}", "q"], :retval=>"v"
    attach_method :setCachesBezierPath, :args=>1, :names=>[], :types=>["B"], :retval=>"v"
    attach_method :setClip, :args=>0, :names=>[], :types=>[], :retval=>"v"
    attach_singular_method :setDefaultFlatness, :args=>1, :names=>[], :types=>["d"], :retval=>"v"
    attach_singular_method :setDefaultLineCapStyle, :args=>1, :names=>[], :types=>["Q"], :retval=>"v"
    attach_singular_method :setDefaultLineJoinStyle, :args=>1, :names=>[], :types=>["Q"], :retval=>"v"
    attach_singular_method :setDefaultLineWidth, :args=>1, :names=>[], :types=>["d"], :retval=>"v"
    attach_singular_method :setDefaultMiterLimit, :args=>1, :names=>[], :types=>["d"], :retval=>"v"
    attach_singular_method :setDefaultWindingRule, :args=>1, :names=>[], :types=>["Q"], :retval=>"v"
    attach_method :setFlatness, :args=>1, :names=>[], :types=>["d"], :retval=>"v"
    attach_method :setLineCapStyle, :args=>1, :names=>[], :types=>["Q"], :retval=>"v"
    attach_method :setLineDash, :args=>3, :names=>["count", "phase"], :types=>["^d", "q", "d"], :retval=>"v"
    attach_method :setLineJoinStyle, :args=>1, :names=>[], :types=>["Q"], :retval=>"v"
    attach_method :setLineWidth, :args=>1, :names=>[], :types=>["d"], :retval=>"v"
    attach_method :setMiterLimit, :args=>1, :names=>[], :types=>["d"], :retval=>"v"
    attach_method :setWindingRule, :args=>1, :names=>[], :types=>["Q"], :retval=>"v"
    attach_method :stroke, :args=>0, :names=>[], :types=>[], :retval=>"v"
    attach_singular_method :strokeLineFromPoint, :args=>2, :names=>["toPoint"], :types=>["{CGPoint=dd}", "{CGPoint=dd}"], :retval=>"v"
    attach_singular_method :strokeRect, :args=>1, :names=>[], :types=>["{CGRect={CGPoint=dd}{CGSize=dd}}"], :retval=>"v"
    attach_method :transformUsingAffineTransform, :args=>1, :names=>[], :types=>["@"], :retval=>"v"
    attach_method :windingRule, :args=>0, :names=>[], :types=>[], :retval=>"Q"
  end
end
